{
  "compiler": {
    "version": "0.8.9+commit.e5eed63a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "_approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "_operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "_approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_approved",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_tokenURI",
            "type": "string"
          }
        ],
        "name": "mint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_tokenURI",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "mintFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "mintedTokens",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "_approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "approve(address,uint256)": {
          "details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
          "params": {
            "_approved": "The new approved NFT controller",
            "_tokenId": "The NFT to approve"
          }
        },
        "balanceOf(address)": {
          "details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
          "params": {
            "_owner": "An address for whom to query the balance"
          },
          "returns": {
            "_0": "The number of NFTs owned by `_owner`, possibly zero"
          }
        },
        "getApproved(uint256)": {
          "details": "Throws if `_tokenId` is not a valid NFT",
          "params": {
            "_tokenId": "The NFT to find the approved address for"
          },
          "returns": {
            "_0": "The approved address for this NFT, or the zero address if there is none"
          }
        },
        "isApprovedForAll(address,address)": {
          "params": {
            "_operator": "The address that acts on behalf of the owner",
            "_owner": "The address that owns the NFTs"
          },
          "returns": {
            "_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
          }
        },
        "mint(string)": {
          "returns": {
            "_0": "the newly minted tokenId"
          }
        },
        "ownerOf(uint256)": {
          "details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
          "params": {
            "_tokenId": "The identifier for an NFT"
          },
          "returns": {
            "_0": "The address of the owner of the NFT"
          }
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\"",
          "params": {
            "_from": "The current owner of the NFT",
            "_to": "The new owner",
            "_tokenId": "The NFT to transfer"
          }
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
          "params": {
            "_data": "Additional data with no specified format, sent in call to `_to`",
            "_from": "The current owner of the NFT",
            "_to": "The new owner",
            "_tokenId": "The NFT to transfer"
          }
        },
        "setApprovalForAll(address,bool)": {
          "details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
          "params": {
            "_approved": "True if the operator is approved, false to revoke approval",
            "_operator": "Address to add to the set of authorized operators."
          }
        },
        "tokenURI(uint256)": {
          "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."
        },
        "transferFrom(address,address,uint256)": {
          "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
          "params": {
            "_from": "The current owner of the NFT",
            "_to": "The new owner",
            "_tokenId": "The NFT to transfer"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "approve(address,uint256)": {
          "notice": "Set or reaffirm the approved address for an NFT"
        },
        "balanceOf(address)": {
          "notice": "Count all NFTs assigned to an owner"
        },
        "getApproved(uint256)": {
          "notice": "Get the approved address for a single NFT"
        },
        "isApprovedForAll(address,address)": {
          "notice": "Query if an address is an authorized operator for another address"
        },
        "mint(string)": {
          "notice": "Mint a token for msg.sender and return the tokenId of this token"
        },
        "name()": {
          "notice": "A descriptive name for a collection of NFTs in this contract"
        },
        "ownerOf(uint256)": {
          "notice": "Find the owner of an NFT"
        },
        "safeTransferFrom(address,address,uint256)": {
          "notice": "Transfers the ownership of an NFT from one address to another address"
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "notice": "Transfers the ownership of an NFT from one address to another address"
        },
        "setApprovalForAll(address,bool)": {
          "notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets."
        },
        "symbol()": {
          "notice": "An abbreviated name for NFTs in this contract"
        },
        "tokenURI(uint256)": {
          "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
        },
        "transferFrom(address,address,uint256)": {
          "notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "src/contracts/ImplERC721.sol": "ImplERC721"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": []
  },
  "sources": {
    "src/contracts/ERC721.sol": {
      "keccak256": "0x7b7b74b6e1d1497c80e17fef2f02a7d43e91a53a1422d3d6dd8e5f7dd68c13f1",
      "license": "CC0-1.0",
      "urls": [
        "bzz-raw://53c7ccc76625c48c55547c939502565d12d31a51b3f5b3a38767f125565ed707",
        "dweb:/ipfs/QmV5vpjKK2AGwF8WdmhbNJw6QaUrXoSPaodQUSFXJpdda3"
      ]
    },
    "src/contracts/ImplERC721.sol": {
      "keccak256": "0xed8169b96bfd6eb0931dbc917ca43de8919df11d159a4dbd95891dd6009a466d",
      "license": "UNLICENSED",
      "urls": [
        "bzz-raw://511487668457a50b516f49a1799e4f20214b02d0f33ee2231455f98a8f329eca",
        "dweb:/ipfs/QmQ4WpaqYudFoSDwk5aMvb9DrzLmD48eub4kEensT3YDax"
      ]
    }
  },
  "version": 1
}
